{
    :applications {
        :alacritty ["^org.alacritty$"]
        :neovide [:paths "^.*\\.cargo/bin/neovide$"]
        :xcode ["^com.apple.dt.Xcode$"]
        :things ["^com.culturedcode.ThingsMac$"]
        :notion ["^notion.id$"]
    }

    :input-sources {
        :ru { :language "ru" }
    }

    :main [

        ;; !  | mandatory
        ;; #  | optional
        ;; C  | left_command
        ;; T  | left_control
        ;; O  | left_option
        ;; S  | left_shift
        ;; F  | fn
        ;; Q  | right_command
        ;; W  | right_control
        ;; E  | right_option
        ;; R  | right_shift
        ;; P  | caps_lock
        ;; !! | mandatory hyper
        ;; ## | optional any

        ;; !CTSequal_sign  | mandatory Cmd Ctrl Shift = (or Cmd Ctrl +)
        ;; !O#Sright_arrow | mandatory Opt optional Shift right_arrow

        ;; Karabiner definition of mandatory and optional
        ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/

        ;; Goku keys
        ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj

        {
            :des "Global configuration"
            :rules [
                ; Homerow mods safety belt for Dvorak layout
                [:!Qh [:t :h]]
                [:!Qn [:t :n]]
                [:!Eh [:s :h]]
                [:!Et [:s :t]]
                [:!Wt [:n :t]]
                [:!Wd [:n :d]]
                [:!Cu [:e :u]]
                [:!Co [:e :o]]
                [:!Ca [:e :a]]
                [:!Ci [:e :i]]
                [:!Se [:u :e]]
                [:!Tu [:o :u]]
                [:!Te [:o :e]]
                [:!Ti [:o :i]]
                [:!Ou [:a :u]]

                ; F21 -> Ctrl + Fn + F8: toggle menubar no macOS
                [:f21 :!TFf8]
            ]
        }

        {
            :des "Alacritty configuration"
            :rules [
                ; Cmd -> Ctrl
                [:##left_command :left_control [:alacritty]]
                [:##right_command :right_control [:alacritty]]

                ; Ctrl -> Cmd
                [:##left_control :left_command [:alacritty]]
                [:##right_control :right_command [:alacritty]]

                ; Restore Cmd+Shift
                ; It works only if Cmd is pressed first
                [:!Tleft_shift :!Cleft_shift [:alacritty]]
                [:!Wright_shift :!Qright_shift [:alacritty]]

                ; If Shift is pressed first, I didn't find any other way
                ; rather than explicitly defining all combinations
                [:!WRy :!QRy [:alacritty]]
                [:!WRp :!QRp [:alacritty]]
                [:!WRe :!QRe [:alacritty]]
                [:!WRa :!QRa [:alacritty]]
                [:!WRx :!QRx [:alacritty]]
                [:!WRk :!QRk [:alacritty]]
                [:!WRj :!QRj [:alacritty]]
                [:!WRspacebar :!QRspacebar [:alacritty]]

                [:!TSf :!CSf [:alacritty]]
                [:!TSd :!CSd [:alacritty]]
                [:!TSt :!CSt [:alacritty]]
                [:!TSs :!CSs [:alacritty]]
                [:!TSb :!CSb [:alacritty]]
                [:!TSm :!CSm [:alacritty]]
                [:!TSw :!CSw [:alacritty]]
                [:!TSv :!CSv [:alacritty]]
                [:!TSdelete_or_backspace :!CSdelete_or_backspace [:alacritty]]

                ; Restore os-specific combinations
                [:!Ttab :!Ctab [:alacritty]] ; Restore Cmd+Tab
                [:!Tv :!Cv [:alacritty]] ; Restore Cmd+V
                [:!Tm :!Tz [:alacritty]] ; Remap Ctrl+M to Ctrl+Z
            ]
        }

        {
            :des "Neovide configuration"
            :rules [
                [:!Ch :!TOSh [:neovide]] ; Cmd+H -> Cmd+Opt+H
                [:!Cm :!TOSm [:neovide]] ; Cmd+M -> Cmd+Opt+M
            ]
        }

        {
            :des "Xcode configuration"
            :rules [
                [:!Ct :!CSo [:xcode]]
                ; [:!Ch :page_down [:xcode]]
            ]
        }

        {
            :des "Things configuration"
            :rules [
                [:!Cp :!Cl [:things]] ; Show in Project
                [:!Cw :escape [:things]] ; Close
            ]
        }

        {
            :des "Notion configuration"
            :rules [
                [:!Ct :!Cp [:notion]]
                [:!Cw :escape [:notion]]
            ]
        }

        {
            :des "RU layout with Dvorak"
            :rules [
                ; Common mappings
                [:#SOERquote :q [:ru]]
                [:#SOERcomma :w [:ru]]
                [:#SOERperiod :e [:ru]]
                [:#SOERp :r [:ru]]
                [:#SOERy :t [:ru]]
                [:#SOERf :y [:ru]]
                [:#SOERg :u [:ru]]
                [:#SOERc :i [:ru]]
                [:#SOERr :o [:ru]]
                [:#SOERl :p [:ru]]
                [:#SOERo :s [:ru]]
                [:#SOERe :d [:ru]]
                [:#SOERu :f [:ru]]
                [:#SOERi :g [:ru]]
                [:#SOERd :h [:ru]]
                [:#SOERh :j [:ru]]
                [:#SOERt :k [:ru]]
                [:#SOERn :l [:ru]]
                [:#SOERs :semicolon [:ru]]
                [:#SOERsemicolon :z [:ru]]
                [:#SOERq :x [:ru]]
                [:#SOERj :c [:ru]]
                [:#SOERk :v [:ru]]
                [:#SOERx :b [:ru]]
                [:#SOERb :n [:ru]]
                [:#SOERw :comma [:ru]]
                [:#SOERv :period [:ru]]
                [:#SOERz :quote [:ru]]

                ; Specific to my keyboard
                [:!Shyphen :!Se [:ru]]
            ]
        }
    ]
}
